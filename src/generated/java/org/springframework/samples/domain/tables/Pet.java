/*
 * This file is generated by jOOQ.
 */
package org.springframework.samples.domain.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.springframework.samples.domain.Indexes;
import org.springframework.samples.domain.Keys;
import org.springframework.samples.domain.Public;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pet extends TableImpl<Record> {

    private static final long serialVersionUID = -27130844;

    /**
     * The reference instance of <code>PUBLIC.PET</code>
     */
    public static final Pet PET = new Pet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>PUBLIC.PET.ID</code>.
     */
    public final TableField<Record, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.PET.NAME</code>.
     */
    public final TableField<Record, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PUBLIC.PET.BIRTH_DATE</code>.
     */
    public final TableField<Record, LocalDate> BIRTH_DATE = createField("BIRTH_DATE", org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>PUBLIC.PET.TYPE_ID</code>.
     */
    public final TableField<Record, Integer> TYPE_ID = createField("TYPE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PET.OWNER_ID</code>.
     */
    public final TableField<Record, Integer> OWNER_ID = createField("OWNER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.PET</code> table reference
     */
    public Pet() {
        this(DSL.name("PET"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PET</code> table reference
     */
    public Pet(String alias) {
        this(DSL.name(alias), PET);
    }

    /**
     * Create an aliased <code>PUBLIC.PET</code> table reference
     */
    public Pet(Name alias) {
        this(alias, PET);
    }

    private Pet(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Pet(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Pet(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PETS_NAME, Indexes.SYS_IDX_FK_PET_OWNERS_10171, Indexes.SYS_IDX_FK_PET_PET_TYPE_10175, Indexes.SYS_IDX_SYS_PK_10164_10167);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Integer> getIdentity() {
        return Keys.IDENTITY_PET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.SYS_PK_10164;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.SYS_PK_10164);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_PET_PET_TYPE, Keys.FK_PET_OWNERS);
    }

    public PetType petType() {
        return new PetType(this, Keys.FK_PET_PET_TYPE);
    }

    public Owner owner() {
        return new Owner(this, Keys.FK_PET_OWNERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pet as(String alias) {
        return new Pet(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pet as(Name alias) {
        return new Pet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pet rename(String name) {
        return new Pet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pet rename(Name name) {
        return new Pet(name, null);
    }
}
